import urllib.request
import re


# 花瓣爬虫类


class HBCrawler:
    def __init__(self):
        self.pageIndex = 1
        self.user_agent = 'Mozilla/4.0(compatible;MSIE 5.5;Windows NT)'
        self.headers = {'User-Agent': self.user_agent}

        self.storages = []
        self.enable = False

    def getPage(self, pageIndex):
        try:
            url = 'http://huaban.com/pins/1918415816/'

            reqst = urllib.request.Request(url, headers=self.headers)

            with urllib.request.urlopen(reqst) as response:
                pageCode = response.read().decode('utf-8')
                return pageCode
        except urllib.request.URLError as e:
            if hasattr(e, 'reason'):
                print('Error', e.reason)
                return None

    def getPageItems(self, pageIndex):
        pageCode = self.getPage(pageIndex)

        print(pageCode)
        if not pageCode:
            print('页面加载失败')
            return None
        pattern = re.compile('"bucket":"hbimg", "key":"(.*?)"', re.S)
        items = re.findall(pattern, pageCode)

        pageStorage = []
        for item in items:
            url = "http://img.hb.aicdn.com/" + item
            pageStorage.append(url)
        return pageStorage

    def loadPage(self):
        if self.enable == True:
            if len(self.storages) < 2:
                pageStorage = self.getPageItems(self.pageIndex)
                if pageStorage:
                    self.storages.append(pageStorage)
                    self.pageIndex += 1

    def getOneStory(self, pageStorage, page):
        x = 0
        for story in pageStorage:
            choose = input()
            self.loadPage()

            if 'Q' == choose:
                self.enable = False
                return
            elif 'N' == choose:
                self.enable = True
            x += 1
            urllib.request.urlretrieve(story, 'D:\pythonImage\huaban\%s.jpg' % x)
            print(x, story)

    def start(self):
        print('花瓣获取中...Q 结束')
        self.enable = True
        self.loadPage()

        nowPage = 0

        while self.enable:
            if len(self.storages) > 0:
                pageStories = self.storages[0]
                nowPage += 1

                print(nowPage)
                del self.storages[0]
                self.getOneStory(pageStories, nowPage)

        return self.storages


hu = HBCrawler()
hu.start()
